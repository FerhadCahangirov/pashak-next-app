// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["debian-openssl-1.0.x", "native"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Product {
    id                  Int                  @id @default(autoincrement())
    categoryId          Int
    name                String
    description         String               @db.Text
    content             String               @db.Text
    category            Category             @relation(fields: [categoryId], references: [id])
    images              ProductImage[]
    productCompositions ProductComposition[]

    @@map("Products")
}

model Composition {
    id                  Int                  @id @default(autoincrement())
    name                String
    productCompositions ProductComposition[]

    @@map("Compositions")
}

model ProductComposition {
    id            Int         @id @default(autoincrement())
    productId     Int
    compositionId Int
    product       Product     @relation(fields: [productId], references: [id])
    composition   Composition @relation(fields: [compositionId], references: [id])

    @@map("ProductCompositions")
}

model ProductImage {
    id        Int     @id @default(autoincrement())
    productId Int
    src       String
    product   Product @relation(fields: [productId], references: [id])

    @@map("ProductImages")
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String
    src      String
    products Product[]

    @@map("Categories")
}

model User {
    id        Int      @id @default(autoincrement())
    name      String
    surname   String
    email     String   @unique
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Blog {
    id        Int      @id @default(autoincrement())
    title     String
    content   String   @db.Text
    src       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    tags      Tag[]
}

model Tag {
    id     Int    @id @default(autoincrement())
    name   String
    blogId Int
    blog   Blog   @relation(fields: [blogId], references: [id])
}

model Cooporate {
    id   Int    @id @default(autoincrement())
    name String
    src  String
    type String
}

model Message {
    id       Int      @id @default(autoincrement())
    name     String
    email    String
    content  String   @db.Text
    createdAt DateTime @default(now())
}
